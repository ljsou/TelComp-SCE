<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:p="http://primefaces.org/ui">
    <h:head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <meta http-equiv='cache-control' content='no-cache'/>
        <meta http-equiv='expires' content='0'/>
        <meta http-equiv='pragma' content='no-cache'/>
        <title>TelCompSCE</title>
        <!-- YUI -->
        <link rel="stylesheet" type="text/css" href="lib/yui/reset-fonts-grids/reset-fonts-grids.css" />
        <link rel="stylesheet" type="text/css" href="lib/yui/assets/skins/sam/skin.css" />

        <!-- InputEx CSS -->
        <link type='text/css' rel='stylesheet' href='lib/inputex/css/inputEx.css' />

        <!-- YUI-accordion CSS -->
        <link rel="stylesheet" type="text/css" href="lib/accordionview/assets/skins/sam/accordionview.css" />

        <!-- WireIt CSS -->
        <link rel="stylesheet" type="text/css" href="css/WireIt.css" />
        <link rel="stylesheet" type="text/css" href="css/WireItEditor.css" />

        <style>
            div.WireIt-Container {
                width: 350px; /* Prevent the modules from scratching on the right */
            }

            div.WireIt-InOutContainer {	
                width: 150px;
            }

            div.WireIt-InputExTerminal {
                float: left;
                width: 21px;
                height: 21px;
                position: relative;
            }
            div.WireIt-InputExTerminal div.WireIt-Terminal {
                top: -3px;
                left: -7px;
            }
            div.inputEx-Group div.inputEx-label {
                width:100px;
            }

            div.WireIt-ImageContainer {
                width: auto;
            }

            div.Bubble div.body {
                width: 70px;
                height: 45px;
                opacity: 0.8;
                cursor: move;
            }

            .WiringEditor-module span {
                position: relative;
                top: -3px;
            }

        </style>

        <!-- YUI -->
        <script type="text/javascript" src="lib/yui/utilities/utilities.js"></script>
        <script type="text/javascript" src="lib/yui/resize/resize-min.js"></script>
        <script type="text/javascript" src="lib/yui/layout/layout-min.js"></script>
        <script type="text/javascript" src="lib/yui/container/container-min.js"></script>
        <script type="text/javascript" src="lib/yui/json/json-min.js"></script>
        <script type="text/javascript" src="lib/yui/button/button-min.js"></script>
        <script type="text/javascript" src="lib/yui/tabview/tabview-min.js"></script>

        <!-- InputEx with wirable options (WirableField-beta) -->
        <script src="lib/inputex/js/inputex.js"  type='text/javascript'></script>
        <script src="lib/inputex/js/Field.js"  type='text/javascript'></script>
        <script type="text/javascript" src="js/util/inputex/WirableField-beta.js"></script>
        <script src="lib/inputex/js/Group.js"  type='text/javascript'></script>
        <script src="lib/inputex/js/Visus.js"  type='text/javascript'></script>
        <script src="lib/inputex/js/fields/StringField.js"  type='text/javascript'></script>
        <script src="lib/inputex/js/fields/Textarea.js"  type='text/javascript'></script>
        <script src="lib/inputex/js/fields/SelectField.js"  type='text/javascript'></script>
        <script src="lib/inputex/js/fields/EmailField.js"  type='text/javascript'></script>
        <script src="lib/inputex/js/fields/UrlField.js"  type='text/javascript'></script>
        <script src="lib/inputex/js/fields/ListField.js"  type='text/javascript'></script>
        <script src="lib/inputex/js/fields/CheckBox.js"  type='text/javascript'></script>
        <script src="lib/inputex/js/fields/InPlaceEdit.js"  type='text/javascript'></script>

        <!-- YUI-Accordion -->
        <script src="lib/accordionview/accordionview-min.js"  type='text/javascript'></script>

        <!-- WireIt -->
        <!--[if IE]><script type="text/javascript" src="lib/excanvas.js"></script><![endif]-->
        <script type="text/javascript" src="js/WireIt.js"></script>
        <script type="text/javascript" src="js/CanvasElement.js"></script>
        <script type="text/javascript" src="js/Wire.js"></script>
        <script type="text/javascript" src="js/Terminal.js"></script>
        <script type="text/javascript" src="js/util/DD.js"></script>
        <script type="text/javascript" src="js/util/DDResize.js"></script>
        <script type="text/javascript" src="js/Container.js"></script>
        <script type="text/javascript" src="js/Layer.js"></script>
        <script type="text/javascript" src="js/util/inputex/FormContainer-beta.js"></script>
        <script type="text/javascript" src="js/LayerMap.js"></script>
        <script type="text/javascript" src="js/WiringEditor.js"></script>
        <script type="text/javascript" src="js/ImageContainer.js"></script>
        <script type="text/javascript" src="js/InOutContainer.js"></script>
        <script type="text/javascript" src="js/adapters/json-rpc.js"></script>

        <!-- Me permite incluier el lenguaje definido -->
        <script type="text/javascript" src="myDemo.js"></script>        


        <style>
            /* Comment Module */
            div.WireIt-Container.WiringEditor-module-comment { width: 200px; }
            div.WireIt-Container.WiringEditor-module-comment div.body { background-color: #EEEE66; }
            div.WireIt-Container.WiringEditor-module-comment div.body textarea { background-color: transparent; font-weight: bold; border: 0; }

            #dvLoading {
                display: none;
                /*background:url(http://loadinggif.com/images/image-selection/34.gif) no-repeat center center;*/
                background:url(images/loading.gif) no-repeat center center;
                height: 25px;
                width: 25px;
                position: fixed;
                right: 65px;
                top: 163px;
                margin: -25px 0 0 -25px;
                z-index: 1000;
                /*                border: #090 solid 1px;*/
            }

        </style>


        <script>

            // InputEx needs a correct path to this image
            inputEx.spacerUrl = "/inputex/images/space.gif";
            var telcompLanguage;
            var editor;
            var changedData = false;
            var compositionName = "";

            function initializeHome() {
                YAHOO.util.Event.onDOMReady(function() {
            #{componentInteractionManagedBean.eraseAll()};
                    console.log("delete");
                    telcompLanguage = #{componentRetrievalManagedBean.jsVarKw}
                    editor = new WireIt.WiringEditor(telcompLanguage);
                    loadSearchPanel(controlStructures, 'control-structures');
                });
            }

            function loadSearchPanel(language, location) {
                console.log("Entra a loadSearchPanel" + language.toString());
                editor.modulesByName = {};
                editor.setAjaxOptions(language);
                editor.options.propertiesFields.inputParams.name = compositionName; //Esto es necesario ya que la variable language no define el atributo "name"
                editor.el = YAHOO.util.Dom.get(editor.options.parentEl);
                editor.helpPanel.render();
                editor.layout.render();
                editor.layer.eventChanged.subscribe(editor.onLayerChanged, editor, true);
                if (location === 'here') {
                    console.log("Entro a here...");
                    editor.leftEl = YAHOO.util.Dom.get(location);
                    editor.buildModulesList();
                    editor.renderSavedStatus();
                    editor.renderPropertiesForm();
                    editor.load();
                    editor.accordionView.openPanel(1);
                    stopLoading();
                } else if (location === 'here2') {
                    console.log("Entro a here2...");
                    editor.leftEl2 = YAHOO.util.Dom.get(location);
                    editor.buildModulesList2();
                    editor.renderSavedStatus();
                    editor.renderPropertiesForm();
                    editor.load();
                    editor.accordionView.openPanel(2);
                    stopLoading();
                } else if (location === 'control-structures') {
                    console.log("Entro a control-structures...");
                    editor.leftEl2 = YAHOO.util.Dom.get(location);
                    editor.buildModulesList2();
                    editor.renderSavedStatus();
                    editor.renderPropertiesForm();
                    editor.load();
                    editor.accordionView.openPanel(6);
                }
            }

            function coloringWire() {
                console.log("submited mapping!");
                var wireID = document.getElementById('clicked-wire').value;
                console.log(wireID);
                editor.layer.dataMapping(new String(wireID), changedData);
            }

            function setChangeElement() {
                console.log("change is false!");
                changedData = false;
            }

            function changeEdgeType() {
                if (changedData === false) {
                    changedData = true;
                    document.getElementById('change').value = JSON.stringify(changedData);
                    console.log("changedData cambi√≥ a: " + changedData);
                    //alert("Are you sure? Now, this edge is both data and control. " + changedData);
                } else {
                    changedData = false;
                    document.getElementById('change').value = JSON.stringify(changedData);
                    console.log("changedData cambi√≥ a: " + changedData);
                    //alert("Now, this one is just a data flow edge. " + changedData);
                }
            }

            function coloringWireUserData() {
                //console.log("submited mapping Use Data!");
                var userDataWireID = document.getElementById('userdata-clicked-wire').value;
                //console.log(userDataWireID);
                editor.layer.userDataMapping(new String(userDataWireID));

            }

            function setDataElements(source, target) {
                //console.log("setDataElements()...");
                editor.layer.addData(new String(source), new String(target));
            }

            function stopDowload() {
                statusDialog.hide();
            }

            function startDowload() {
                statusDialog.show();
                setTimeout('stopDowload()', 3500);
            }

            function startLoading() {
                document.getElementById("dvLoading").style.display = "block";
            }

            function stopLoading() {
                document.getElementById("dvLoading").style.display = "none";
            }

            function setNone() {
                console.log("none...");
            }

            function setName() {
                compositionName = document.getElementById("newText").value;
                console.log("compositionName: " + compositionName);
                console.log("Name: " + editor.options.propertiesFields.inputParams.name);
                editor.options.propertiesFields.inputParams.name = compositionName;
                console.log("New name: " + editor.options.propertiesFields.inputParams.name);
            }

            function setResponse(respuesta) {
                console.log("# " + respuesta);
                var name = editor.options.propertiesFields.inputParams.name;      
                initValues(respuesta, name);
            }
            
            function initValues(response, name) {                                                    
            console.log("++Response: " + response);            
            var successful = "http://192.168.190.100:8084/JSLEEorchestrator/" + name + ".png";
            var error = "http://192.168.190.100:8084/JSLEEorchestrator/error.png";
            console.log("Error: " + error);
            console.log("Successful: " + successful);            
            if (response === successful) {
                document.getElementById("response").innerHTML = JSON.stringify("BUILD SUCCESSFUL:  The service " + name + " was deployed correctly!");
                document.getElementById("response").style.color = 'green';
            } else if (response === error) {
                document.getElementById("response").innerHTML = JSON.stringify("BUILD FAILED:  The service " + name + " could not be deployed!");
                document.getElementById("response").style.color = 'red';
            } else {
                document.getElementById("response").innerHTML = JSON.stringify(response);
                document.getElementById("response").style.color = 'blue';
            }
            console.log("Result: " + response);
        }


        </script>
    </h:head>
    <h:body styleClass="yui-skin-sam" style="background: #f5f5f5;" onload="initializeHome();">
        <div id="dvLoading"></div>
        <div id="top" >
            <div class="logo"><a href="help.xhtml" style="text-decoration:none; color: #0B243B;">TelComp</a></div>
            <div class="logoUp"><a href="help.xhtml" style="text-decoration:none; color: #0B243B;">2.0</a></div>            
            <div id="toolbar"></div>
        </div>

        <div id="left">
            <ul border="1">                
                <li>                
                    <div style='position: relative;'>
                        <div id="layerMap"></div>
                    </div>
                </li>	
                <li>  
                    <h:form id="componentInformation" prependId="false">
                        <h:inputHidden id="componentInfo" value="#{componentInteractionManagedBean.componentId}" />                        
                        <p:commandButton id="componentInfoBtn" onclick="jsf.ajax.request(this, event, {execute: 'componentInfo', render: 'componentInfoPanel'});
                return false;" style="display: none;"/>                                                                                               
                        <p:outputPanel id="componentInfoPanel" style="width: 100%;">  
                            <br/>
                            <h:outputLabel value="Component Information" style="margin-left: 2%; margin-top: 15px; font-weight: 600; font-size: 13px;"/>
                            <br/>                                                
                            <h:panelGrid  columns="2" style="width: 95%; margin-left: 2%; margin-top: 2%;">                              

                                <h:outputLabel for="name" value="Name(ID):" style="font-size: 11px;"/>  
                                <h:outputLabel id="name" value="#{componentInteractionManagedBean.component.operationName} (#{componentInteractionManagedBean.component.id})" style="height: 20px; padding: 1px 5px;  font-weight: 600; font-size: 11px; color: #666;"/>

                                <h:outputLabel for="inputs" value="Inputs:" style="font-size: 11px;"/>  
                                <p:dataList id="inputs" value="#{componentInteractionManagedBean.componentInputs}" var="componentInputs" type="ordered">  
                                    <p style="padding: 0 0 1px 5px; font-size: 11px; background: #eee; margin: -1px; border-bottom: #fff solid 1px; color: #090;">- #{componentInputs.dataElementName} (#{componentInputs.dataType})</p> 
                                </p:dataList>                                   
                                <h:outputLabel for="outputs" value="Outputs:" style="font-size: 11px;"/>  
                                <p:dataList id="outputs" value="#{componentInteractionManagedBean.componentOutputs}" var="componentOutputs" type="ordered">  
                                    <p style="padding: 0 0 1px 5px; font-size: 11px; background: #eee; margin: -1px; border-bottom: #fff solid 1px; color: #0e90d2;">- #{componentOutputs.dataElementName} (#{componentOutputs.dataType})</p>
                                </p:dataList>   
                            </h:panelGrid>                            
                        </p:outputPanel> 
                    </h:form>
                </li>
                <li>                    
                    <div>
                        <h:form id="view-result" prependId="false">
                            <h:inputHidden id="json-graph" value="#{componentInteractionManagedBean.jsonGraph}"/>
                            <p:commandButton id="json-graph-Btn" actionListener="#{componentInteractionManagedBean.sendJson()}" style="display: none;"></p:commandButton>
                            <h2 style="width: 100px; margin: 15px 5px -3px 5px; font-weight: 600; color: #777;">JSON Graph</h2>
                            <p id="jsonResult" style="display: block; overflow: scroll; margin: 5px; font-size: 11px;padding: 5px; width: 232px; height: 200px; border: #999 dotted 1px; background-color: #333; color: #fff;"></p>                           
                            <h2 style="width: 100px; margin: 15px 5px -3px 5px; font-weight: 600; color: #777;">Output</h2>
                            <p id="response" style="display: block; margin: 5px; font-size: 11px;padding: 5px; width: 232px; height: 40px; border: #999 dotted 1px; background-color: #333;"></p>
                        </h:form>
                    </div>
                </li>	
                <li>
                    <div style="
                         position: absolute;                         
                         top: 85%;                         ">
                        <img src="images/git.png" width="100%" height="100%" style="opacity: .2;"/>
                    </div>
                </li>	
            </ul>`            
        </div>

        <div id="right">
            <h:form prependId="false">
                <ul id="accordionView">
                    <li>
                        <h2>Search</h2>
                        <div style='position: relative;'>
                            <br />
                            <!--div id ="propertiesForm"--> 
                            <div>

                                <h:outputScript name="jsf.js" library="javax.faces" target="head"/>
                                <h:outputLabel value="Enter your query..." style="color: #777; width: 200px; margin: 0px 5px 0px 8px;"/> 
                                <h:inputText id="key" value="#{componentRetrievalManagedBean.keyword}" style=" width: 180px; margin: 0px 5px 0px 8px;"/>
                                <p:commandButton id="keywordSearchBtn" style="font-size: smaller" icon="ui-icon-search" onclick="startLoading();
                jsf.ajax.request(this, event, {execute: 'key', render: 'here'});
                return false;" ></p:commandButton>

                            </div>
                            <div><br /></div>
                        </div>
                    </li>
                    <li>
                        <h2>Search by keyword</h2>
                        <div>
                            <!--<input id="location" type="hidden" value="here" />-->
                            <h:panelGroup id="here" layout="block">
                                <script>
            telcompLanguage = #{componentRetrievalManagedBean.jsVarKw}
            loadSearchPanel(telcompLanguage, 'here');
                                </script>
                            </h:panelGroup>
                        </div>
                    </li>
                    <li>
                        <h2>Similar Components</h2>
                        <div>
                            <h:inputHidden id="simSearch" value="#{componentRetrievalManagedBean.selectedComponentId}" />
                            <h:commandButton id="simBtn" value="Search" onclick="jsf.ajax.request(this, event, {execute: 'simSearch', render: 'here2'});
                return false;" style="display: none;" ></h:commandButton>
                            <h:panelGroup id="here2" layout="block">
                                <script>
            telcompLanguage = #{componentRetrievalManagedBean.jsVarQy}
            loadSearchPanel(telcompLanguage, 'here2');
                                </script>
                            </h:panelGroup>
                        </div>
                    </li><li>
                        <h2>Co-occurring Components</h2>
                        <div style='position: relative;'>
                            <div>here are similar components have been<br /> used together in a composition...</div>
                        </div>
                    </li>
                    <li>
                        <h2>Direct Sequence</h2>
                        <div style='position: relative;'>
                            <div>Here are the components that<br /> have direct causal dependence...</div>
                        </div>
                    </li>
                    <li>
                        <h2>Inverse sequence</h2>
                        <div style='position: relative;'>
                            <div>Here are the components that<br /> have direct causal inverse</div>
                        </div>
                    </li>
                    <li>
                        <h2>Control Structures</h2>
                        <div>
                            <h:panelGroup id="control-structures" layout="block">

                            </h:panelGroup>
                        </div>
                    </li>

                </ul>

            </h:form> 
        </div>

        <div id="center" style="font-size: 20px;">

        </div>
        <div >
            <h:form id="form" prependId="false">

                <p:commandButton id="userDataModalDialogButton" type="button" onclick="jsf.ajax.request(this, event, {render: 'userDataMappingTable'});
                return false;" style="display: none;"/>
                <h:inputHidden id="userdata-clicked-wire" value="null"/>
                <h:inputHidden id="operationName" value="#{componentInteractionManagedBean.userDataOperationName}" />
                <h:inputHidden id="userDataQuery" value="#{componentInteractionManagedBean.userDataQuery}" />              
                <h:inputHidden id="userDataTarget" value="#{componentInteractionManagedBean.userDataTarget}" />

                <h:commandButton id="operationNameBtn" onclick="jsf.ajax.request(this, event, {execute: 'operationName'});
                return false;" style="display: none;" />
                <h:commandButton id="userDataQueryBtn" onclick="jsf.ajax.request(this, event, {execute: 'userDataQuery'});
                return false;" style="display: none;" />
                <h:commandButton id="userDataTargetBtn" onclick="jsf.ajax.request(this, event, {execute: 'userDataTarget'});
                return false;" style="display: none;" />
                <div style="width: 70%; height: 40%;"></div>

                <p:overlayPanel id="userDataMappingPanel" widgetVar="overlayPanelUserDataMapping" for="userDataModalDialogButton" showEffect="drop" hideEffect="drop" dynamic="true" my="right top" at="right bottom" style="height:250px; padding: 40px 20px 0px 30px; margin: -20px; background:#333;background:rgba(0,0,0,0.75);border: 0;">   
                    <p:dataTable id="userDataMappingTable" value="#{componentInteractionManagedBean.userDataOutputs}" var="userDataOutputs" 
                                 style="width:420px; font-size: 12px;">
                        <f:facet name="header">  
                            Data Mapping 2
                        </f:facet>
                        <p:column headerText="#{componentInteractionManagedBean.userDataOperationName}" style="width:300px;">  
                            #{userDataOutputs.dataElementName} 
                            (#{userDataOutputs.dataType})
                        </p:column> 

                        <p:column headerText="#{componentInteractionManagedBean.target.operationName}" style="width:300px;">  
                            <p:selectOneMenu value="#{componentInteractionManagedBean.selectedUserDataTarget}" effect="fade" >  
                                <f:selectItem itemLabel="Select One" itemValue="" />  
                                <f:selectItems value="#{componentInteractionManagedBean.userDataOperationInputs}" var="userDataElementTarget" itemLabel="#{userDataElementTarget.dataElementName} (#{userDataElementTarget.dataType})" itemValue="#{userDataElementTarget.dataElementName}"/>  
                            </p:selectOneMenu>   
                        </p:column> 
                        <f:facet name="footer">  
                            <p:commandButton value="Submit" icon="ui-icon-circle-triangle-e" style="height: 30px; font-size: 13px;"
                                             onclick="dlg.show();" 
                                             update=":form:userdata"/>
                        </f:facet> 
                    </p:dataTable>
                </p:overlayPanel>  

                <p:dialog header="Selected Values" modal="true" showEffect="fade" hideEffect="fade" widgetVar="dlg" resizable="false">  
                    <p:outputPanel id="userdata">  
                        <p:dataList value="#{componentInteractionManagedBean.selectedUserDataTarget}" var="userData">  
                            #{componentInteractionManagedBean.userDataQuery} - #{userData} 
                            <script>
            var source = "#{componentInteractionManagedBean.userDataQuery}";
            var target = "#{userData}";
            console.log(source);
            console.log(target);
            setDataElements(source, target);
                            </script>
                        </p:dataList>  
                    </p:outputPanel> 
                    <p:commandButton value="I Agree!" icon="ui-icon-circle-check"  
                                     oncomplete="dlg.hide()" action="#{componentInteractionManagedBean.eraseAll()}" 
                                     onclick="overlayPanelUserDataMapping.hide();
                coloringWireUserData();"
                                     style="height: 30px; font-size: 13px;"/>  
                    <p:commandButton value="Cancel" icon="ui-icon-alert"  
                                     oncomplete="dlg.hide()" action="#{componentInteractionManagedBean.eraseAll()}"
                                     onclick="overlayPanelUserDataMapping.show();"
                                     style="height: 30px; font-size: 13px;"/>  
                </p:dialog>
            </h:form>

            <h:form id="form2" prependId="false">
                <p:growl id="msg" /> 
                <p:commandButton id="modalDialogButton" type="button" onclick="jsf.ajax.request(this, event, {render: 'dataMappingTable'});
                setChangeElement();
                return false;" style="display: none;"/>

                <h:inputHidden id="clicked-wire" value="null"/>
                <h:inputHidden id="queryIdInput" value="#{componentInteractionManagedBean.queryId}" />
                <h:inputHidden id="targetIdInput" value="#{componentInteractionManagedBean.targetId}" />


                <h:commandButton id="initQueryDataBtn" onclick="jsf.ajax.request(this, event, {execute: 'queryIdInput'});
                return false;" style="display: none;" />
                <h:commandButton id="initTargetDataBtn" onclick="jsf.ajax.request(this, event, {execute: 'targetIdInput'});
                return false;" style="display: none;" />

                <p:overlayPanel id="dataMappingPanel" widgetVar="overlayPanelMapping" for="modalDialogButton" showEffect="drop" hideEffect="drop" dynamic="true" my="right top" at="right bottom" style="height:250px; padding: 40px 20px 0px 30px; margin: -20px; background:#333;background:rgba(0,0,0,0.75);border: 0;">   
                    <p:dataTable id="dataMappingTable" value="#{componentInteractionManagedBean.operationOutputs}" var="dataAssociation" 
                                 selectionMode="multiple" selection="#{componentInteractionManagedBean.selectedSource}" rowKey="#{dataAssociation.dataElementName}" 
                                 style="width:420px; font-size: 12px;">
                        <f:facet name="header">  
                            Data Mapping 
                        </f:facet>
                        <p:column headerText="#{componentInteractionManagedBean.query.operationName}" style="width:300px;">  
                            #{dataAssociation.dataElementName} 
                            (#{dataAssociation.dataElementName})
                        </p:column> 

                        <p:column headerText="#{componentInteractionManagedBean.target.operationName}" style="width:300px;">  
                            <p:selectOneMenu value="#{componentInteractionManagedBean.selectedTarget}" effect="fade" >  
                                <f:selectItem itemLabel="Select One" itemValue="" />  
                                <f:selectItems value="#{componentInteractionManagedBean.operationInputs}" var="dataElementTarget" itemLabel="#{dataElementTarget.dataElementName} (#{dataElementTarget.dataType})" itemValue="#{dataElementTarget.dataElementName}"/>  
                            </p:selectOneMenu>   
                        </p:column> 
                        <f:facet name="footer">  
                            <p:commandButton value="Submit" icon="ui-icon-circle-triangle-e" style="height: 30px; font-size: 13px;"
                                             onclick="dataDialog2.show();"
                                             action="#{componentInteractionManagedBean.createAssociation()}"
                                             update=":form2:display"/>
                        </f:facet> 
                    </p:dataTable>                    
                    <p:commandButton value="Change" onclick="changeEdgeType();" actionListener="#{componentInteractionManagedBean.addMessage()}" update="msg" style="float: left; font-size: 11px; padding: 0px -3px 0pc -3px; margin: 5px 5px 15px 0px; width: 59px; height: 27px;" />                        
                    <h:inputHidden id="change" value="#{componentInteractionManagedBean.checkedString}" />                        

                    <h:outputText value="When this button is pressed, the edge is considered both data and control.Otherwise, this will be a data only edge." style="color: #aaa; font-weight: 600; font-size: 11px; float: left; margin: 7px 5px 15px 0px; width: 360px; text-align: left;"/>                       
                </p:overlayPanel>

                <p:dialog header="Defined data mapping" widgetVar="dataDialog2"  
                          width="400" showEffect="explode" hideEffect="explode" modal="true" resizable="false">                    
                    <p:dataTable id="display" value="#{componentInteractionManagedBean.associations}" var="dataAssociationTest" 
                                 style="width:350px; font-size: 15px;">;                                                
                        <p:column headerText="Source" style="width:300px;">  
                            #{dataAssociationTest.sourceData.dataElementName} 
                            <script>
            var source = "#{dataAssociationTest.sourceData.dataElementName}";
            var target = "#{dataAssociationTest.targetData.dataElementName}";
            console.log(source);
            console.log(target);
            setDataElements(source, target);
                            </script>
                        </p:column> 
                        <p:column headerText="Target" style="width:300px;">  
                            #{dataAssociationTest.targetData.dataElementName} 
                        </p:column> 
                    </p:dataTable>
                    <f:facet name="footer">  
                        <p:commandButton value="I Agree" icon="ui-icon-circle-check"  
                                         oncomplete="dataDialog2.hide()" action="#{componentInteractionManagedBean.eraseAll()}" 
                                         onclick="overlayPanelMapping.hide();
                coloringWire();"
                                         style="height: 30px; font-size: 13px;"/>  
                        <p:commandButton value="Cancel" icon="ui-icon-alert"  
                                         oncomplete="dataDialog2.hide()" action="#{componentInteractionManagedBean.eraseAll()}"
                                         onclick="overlayPanelMapping.show();"
                                         style="height: 30px; font-size: 13px;"/>  
                    </f:facet> 
                </p:dialog>    
            </h:form>
            <h:form id="newComposition" prependId="false">
                <h:commandButton id="new-btn" value="Submit"  style="height: 30px; font-size: 13px; display: none;"
                                 onclick="newDlg.show();
                return false;"/>
                <p:dialog header="New Composition" modal="true" showEffect="fade" hideEffect="fade" widgetVar="newDlg" resizable="false">  
                    <p:outputPanel id="newCompositionPanel">  
                        <h:outputLabel value="Type a name for your composition:" style="float: left; font-size: 12px; margin-top: 10px;"/>
                        <br />
                        <h:inputText id="newText" value="#{componentInteractionManagedBean.complexComponentName}" required="true" style="float: left; width: 250px; margin-top: 8px;"></h:inputText>
                        <p:commandButton icon="ui-icon-disk" onclick="jsf.ajax.request(this, event, {execute: 'newText'});
                newDlg.hide();
                setName();
                return false;" style="height: 24px; float: right; margin-left: 5px; margin-top: 5px;"/>
                    </p:outputPanel> 
                </p:dialog>
            </h:form>

            <h:form id="rsp" prependId="false">                                  
<!--                <p:commandButton id="run-btn" onclick="{componentInteractionManagedBean.runComplexComponent()}" style="display: none;"></p:commandButton>-->
                <p:commandButton id="response-btn" onclick="imgDlg.show();" update=":rsp:fresponse,:rsp:fresponseImg" style="display: none;"></p:commandButton>
                <p:dialog header="System Response" modal="true" showEffect="fade" hideEffect="fade" widgetVar="imgDlg" resizable="false" dynamic="true">                  
                    <br />
                    <p:commandLink id="fresponse" value="#{componentInteractionManagedBean.viewResponse()}" style="display: none;"/>
                    <br />
                    <br />
                    <p:graphicImage id="fresponseImg" value="#{componentInteractionManagedBean.viewResponse()}" alt="aqu√≠ deber√≠a ir algo"></p:graphicImage>
                    <br />
                    <br />
                    <p:commandButton value="Ok" onclick="imgDlg.hide();"/>
                </p:dialog>
            </h:form>

        </div>
    </h:body>
</html>

